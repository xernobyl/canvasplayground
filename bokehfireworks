<script>
'use strict'

let frame = 0
let canvas = null
let context = null
let particles = [[], []]
let last_time = 0.0
let noise = null
let mouse_x = 0
let mouse_y = 0
let mouse_dx = 0
let mouse_dy = 0
let flare = null
let random_normalize = 1.0 / (1.0 - Number.EPSILON)
let random_normalize2 = 2.0 / (1.0 - Number.EPSILON)

function hsvToRgb(h, s, v) {
	let r, g, b
	let i
	let f, p, q, t

	// Make sure our arguments stay in-range
	h = h % 360
	if (h < 0)
		h = 360 + h
	s = Math.max(0, Math.min(1.0, s))
	v = Math.max(0, Math.min(1.0, v))

	if (s == 0)
		return [v, v, v]

	h /= 60 // sector 0 to 5
	i = Math.floor(h)
	f = h - i // factorial part of h
	p = v * (1 - s)
	q = v * (1 - s * f)
	t = v * (1 - s * (1 - f))

	switch (i) {
	case 0:
		r = v
		g = t
		b = p
		break

	case 1:
		r = q
		g = v
		b = p
		break

	case 2:
		r = p
		g = v
		b = t
		break

	case 3:
		r = p
		g = q
		b = v
		break

	case 4:
		r = t
		g = p
		b = v
		break

	default: // case 5:
		r = v
		g = p
		b = q
	}

	return [r, g, b]
}

function Random() {
	return Math.random() * random_normalize2 - 1.0
}

class Vec2 {
	constructor(x, y) {
		this.v = new Float32Array(2)
		this.v[0] = x
		this.v[1] = y
	}

	get x() {
		return this.v[0]
	}

	set x(x) {
		this.v[0] = x
	}

	get y() {
		return this.v[1]
	}

	set y(y) {
		this.v[1] = y
	}
}

class Camera {
	constructor() {
		this.field_of_view = Math.PI * 0.25
		this.fov_scale = -Math.tan(this.field_of_view * 0.5)
		this.depth_factor = Math.tan(this.field_of_view * 0.5)
		this.screen_scale = new Vec2(0.0, 0.0)
		this.screen_bias = new Vec2(0.0, 0.0)
		this.mouse_scale = new Vec2(0.0, 0.0)
		this.mouse_bias = new Vec2(0.0, 0.0)
		this.focal_plane = -8.5
	}

	updateScreen() {
		let inv_scale = 1.0 / Math.sqrt(canvas.width * canvas.width + canvas.height * canvas.height)
		this.scale = 1.0 / inv_scale

		this.screen_scale.x = this.scale * 0.5
		this.screen_scale.y = -this.scale * 0.5
		this.screen_bias.x = canvas.width * 0.5 + 0.5
		this.screen_bias.y = canvas.height * 0.5 + 0.5

		this.mouse_scale.x = 2.0 * inv_scale
		this.mouse_scale.y = -2.0 * inv_scale
		this.mouse_bias.x = -canvas.width * inv_scale - inv_scale
		this.mouse_bias.y = canvas.height * inv_scale + inv_scale

		this.mouse_scale.x /= -this.fov_scale
		this.mouse_scale.y /= -this.fov_scale

		this.mouse_bias.x /= -this.fov_scale
		this.mouse_bias.y /= -this.fov_scale
	}
}

let camera = new Camera()

function generateFlare(n) {
	let flare = {
		n_sides: n,
		buffer: new Float32Array(2 * n),
		apothem: Math.sqrt(1.0 / (n * Math.tan(Math.PI / n))) * 2.0, // actually 2 * apothem
		render: function() {
			context.beginPath()
			context.moveTo(this.buffer[0], this.buffer[1])
			for (let i = 2; i < this.buffer.length; i += 2)
				context.lineTo(this.buffer[i + 0], this.buffer[i + 1])
			context.closePath()
		}
	}

	let t = 2 * Math.PI / n
	let r = Math.sqrt(2.0 / n / Math.sin(t))

	for (let i = 0; i < n; ++i) {
		flare.buffer[i * 2 + 0] = r * Math.cos(i * t)
		flare.buffer[i * 2 + 1] = r * Math.sin(i * t)
	}

	return flare
}

class Mat4 {
	constructor() {
		this.m = new Float32Array(4 * 4)
		this.v[ 0] = 1.0
		this.v[ 1] = 0.0
		this.v[ 2] = 0.0
		this.v[ 3] = 0.0

		this.v[ 4] = 0.0
		this.v[ 5] = 1.0
		this.v[ 6] = 0.0
		this.v[ 7] = 0.0

		this.v[ 8] = 0.0
		this.v[ 9] = 0.0
		this.v[10] = 1.0
		this.v[11] = 0.0

		this.v[12] = 0.0
		this.v[13] = 0.0
		this.v[14] = 0.0
		this.v[15] = 1.0
	}

	copy(m) {
		this.m = new Float32Array(4 * 4)
		this.m[ 0] = m[ 0]
		this.m[ 1] = m[ 1]
		this.m[ 2] = m[ 2]
		this.m[ 3] = m[ 3]

		this.m[ 4] = m[ 4]
		this.m[ 5] = m[ 5]
		this.m[ 6] = m[ 6]
		this.m[ 7] = m[ 7]

		this.m[ 8] = m[ 8]
		this.m[ 9] = m[ 9]
		this.m[10] = m[10]
		this.m[11] = m[11]

		this.m[12] = m[12]
		this.m[13] = m[13]
		this.m[14] = m[14]
		this.m[15] = m[15]
	}
}

class Vec3 {
	constructor(x, y, z) {
		this.v = new Float32Array(3)
		this.v[0] = x
		this.v[1] = y
		this.v[2] = z
	}

	/*constructor() {
		this.v = new Float32Array(3)
		this.v[0] = 0.0
		this.v[1] = 0.0
		this.v[2] = 0.0
	}

	constructor(v) {
		this.v = new Float32Array(3)
		this.v[0] = v[0]
		this.v[1] = v[1]
		this.v[2] = v[2]
	}*/

	get x() {
		return this.v[0]
	}

	get y() {
		return this.v[1]
	}

	get z() {
		return this.v[2]
	}

	set x(x) {
		this.v[0] = x
	}

	set y(y) {
		this.v[1] = y
	}

	set z(z) {
		this.v[2] = z
	}
}

function rgba(r, g, b, a) {
	return 'rgba(' +
		Math.round(Math.min(Math.max(r * 255.0, 0.0), 255.0)) + ',' +
		Math.round(Math.min(Math.max(g * 255.0, 0.0), 255.0)) + ',' +
		Math.round(Math.min(Math.max(b * 255.0, 0.0), 255.0)) + ',' +
		Math.min(Math.max(a, 0.0), 1.0) + ')'
}

function rgb(r, g, b) {
	return 'rgb(' +
		Math.round(Math.min(Math.max(r * 255.0, 0.0), 255.0)) + ',' +
		Math.round(Math.min(Math.max(g * 255.0, 0.0), 255.0)) + ',' +
		Math.round(Math.min(Math.max(b * 255.0, 0.0), 255.0)) + ')'
}

function createImage(width, height, render) {
	let canvas = document.createElement('canvas')
	canvas.width = width
	canvas.height = height
	let context = canvas.getContext('2d')

	render(canvas, context)

	let image = new Image()
	image.src = canvas.toDataURL('image/png')
	return image
}

function createNoiseLayer(width, height, pad) {
	return {
		pad: pad,
		width: width,
		height: height,
		image: createImage(width + pad, height + pad, (canvas, context) => {
			let buffer = context.createImageData(width + pad, height + pad)
			for (let i = 0; i < (width + pad) * (height + pad); ++i) {
				let v = Math.round(Math.random() * 256.0)
				buffer.data[i * 4 + 0] = v
				buffer.data[i * 4 + 1] = v
				buffer.data[i * 4 + 2] = v
				buffer.data[i * 4 + 3] = Math.round(Math.random() * 32.0)
			}
			context.putImageData(buffer, 0, 0)
		}),
	}
}

function renderNoise() {
	let bias_x = Math.random() * noise.pad
	let bias_y = Math.random() * noise.pad

	//context.save()
	//context.globalCompositeOperation = 'darker'

	context.drawImage(noise.image,
		bias_x, bias_y, noise.width, noise.height,
		0, 0, canvas.width, canvas.height)

	//context.restore()
}

function sign(v) {
	if (v < 0.0)
		return -1.0
	else if (v > 0.0)
		return 1.0
	else
		return 0.0
}

class Particle {
	constructor() {
		this.transform = new Float32Array(6)
		this.transform[1] = 0.0
		this.transform[2] = 0.0

		//this.p = new Vec3(0.0, 0.0, 10.0)
		//this.p = new Vec3(Random(), Random(), Random() - 10.0)
		let theta = Math.random() * Math.PI * 2.0
		let phi = Random() * 0.5 * Math.PI + 0.5 * Math.PI
		let z = Math.cos(phi)
		let t = Math.sqrt(1.0 - z * z)
		let x = t * Math.cos(theta)
		let y = t * Math.sin(theta)

		//this.v = new Vec3(Random() + 0.1 * mouse_dx, Random() - 0.1 * mouse_dy, Random())
		this.v = new Vec3(x + 0.1 * mouse_dx, y - 0.1 * mouse_dy, z)

		this.p = new Vec3(x + (mouse_x * camera.mouse_scale.x + camera.mouse_bias.x) * 10.0, y + (mouse_y * camera.mouse_scale.y + camera.mouse_bias.y) * 10.0, z - 10.0)
		let r = Random()
		r = sign(r) * Math.sqrt(Math.abs(r))
		this.color = hsvToRgb(last_time * 0.1 + 60.0 * r, 1.0 - 0.5 * Math.random(), 1.0)//[(1.0 - Math.random()) * 1.0, (1.0 - Math.random()) * 0.75, (1.0 - Math.random()) * 0.25]
		this.color[0] *= 25
		this.color[1] *= 25
		this.color[2] *= 25
		this.life_span = 5000.0 - Math.random() * 2500.0
		this.age = 0
	}

	update(dt, camera) {
		this.v.y += -0.98 / dt

		this.p.x += this.v.x / dt
		this.p.y += this.v.y / dt
		this.p.z += this.v.z / dt
		this.age += dt

		let dz = camera.focal_plane - this.p.z
		//let dz = Math.sqrt(this.p.x * this.p.x + this.p.y * this.p.y + this.p.z * this.p.z) + camera.focal_plane
		//let scale = sign(dz) * Math.max(Number.EPSILON, 0.05 * Math.abs(dz) * camera.scale)
		let scale = 0.02 * dz * camera.scale
		//let alpha = 1.0 / (scale * scale)
		let alpha = (1.0 + Number.EPSILON) / (scale * scale + Number.EPSILON)
		alpha *= Math.sqrt(1.0 - this.age / this.life_span)

		let w = camera.fov_scale / this.p.z
		let x = this.p.x * w
		let y = this.p.y * w

		this.style = rgb(this.color[0] * alpha, this.color[1] * alpha, this.color[2] * alpha)
		this.transform[0] = scale
		this.transform[3] = scale
		this.transform[4] = x * camera.screen_scale.x + camera.screen_bias.x
		this.transform[5] = y * camera.screen_scale.y + camera.screen_bias.y
	}

	render() {
		if (this.p.z >= 0.0)
			return

		context.strokeStyle = this.style
		//context.fillStyle = this.style
		context.setTransform(
			this.transform[0], this.transform[1],
			this.transform[2], this.transform[3],
			this.transform[4], this.transform[5])
		flare.render()
		context.stroke()
		//context.fill()
	}
}

let fire = false

function fireParticles() {
	fire = true
}

function updateParticles(dt, camera) {
	let buffer = frame & 1
	let other_buffer = buffer ^ 1

	particles[buffer] = []

	if (fire) {
		for (let i = 0; i < 128; ++i) {
			particles[buffer].unshift(new Particle())
		}
		fire = false
	}

	// filter dead particles
	for (let i in particles[other_buffer]) {
		particles[other_buffer][i].update(dt, camera)
		if (particles[other_buffer][i].age < particles[other_buffer][i].life_span)
			particles[buffer].unshift(particles[other_buffer][i])
	}
}

function renderParticles() {
	let buffer = frame & 1

	context.save()
	context.lineWidth = flare.apothem
	context.lineJoin = 'round'
	context.globalCompositeOperation = 'lighter'

	for (let i in particles[buffer])
		particles[buffer][i].render()

	context.restore()
}

function renderBackground() {
	context.fillStyle = '#000'
	context.fillRect(0, 0, canvas.width, canvas.height)
}

function renderLoop(frame_time) {
	let dt = frame_time - last_time
	last_time = frame_time

	updateParticles(dt, camera)

	renderBackground()
	renderParticles()
	//renderNoise()

	++frame

  window.requestAnimationFrame(renderLoop)
}

function resize() {
	canvas.width = window.innerWidth
	canvas.height = window.innerHeight
	camera.updateScreen()
}

window.onload = function() {
	canvas = document.createElement('canvas')
	canvas.style.width = '100%'
	canvas.style.height = '100%'
	canvas.style.top = '0'
	canvas.style.left = '0'
	canvas.style.position = 'fixed'
	//canvas.style.padding = '0'
	canvas.style.zIndex = '-1'

	resize()
	window.addEventListener('resize', resize)

	context = canvas.getContext('2d')

	document.body.appendChild(canvas)

	flare = generateFlare(5)
	//noise = createNoiseLayer(canvas.width * 0.5, canvas.height * 0.5, 64)

	document.onmousemove = (e) => {
		mouse_dx = e.clientX - mouse_x
		mouse_dy = e.clientY - mouse_y
		mouse_x = e.clientX
		mouse_y = e.clientY
	}

	document.onmousedown = (e) => {
		fireParticles()
	}

	renderLoop(0)
}
</script>
